{
	"name": "Kotlin",
	"scopeName": "source.kotlin",
	"fileTypes": ["kt", "kts"],
	"patterns": [
		{
			"include": "#comments-javadoc"
		},
		{
			"include": "#comments"
		},
		{
			"captures": {
				"1": {
					"name": "keyword.other.kotlin"
				}, 
				"2": {
					"name": "entity.name.package.kotlin"
				}
			}, 
			"match": "^\\s*(package)\\b(?:\\s*([^ ;$]+)\\s*)?"
		},
		{
			"include": "#imports"
		},
		{
			"include": "#statements"
		}
	],
	"repository": {
		"statements": {
			"patterns": [
				{
					"include": "#namespaces"
				},
				{
					"include": "#annotations"
				},
				{
					"include": "#typedefs"
				},
				{
					"include": "#classes"
				},
				{
					"include": "#functions"
				},
				{
					"include": "#variables"
				},
				{
					"include": "#getters-and-setters"
				},
				{
					"include": "#expressions"
				}
			]
		},
		"comments-javadoc": {
			"patterns": [
				{
					"begin": "^\\s*(/\\*\\*)(?!/)",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.comment.kotlin"
						}
					},
					"end": "\\*/",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.kotlin"
						}
					},
					"name": "comment.block.documentation",
					"patterns": [
						{
							"match": "@(author|deprecated|return|see|serial|since|version|hide)\\b",
							"name": "keyword.other.documentation.javadoc.kotlin"
						},
						{
							"match": "(@param)\\s+(\\S+)",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.javadoc.kotlin"
								},
								"2": {
									"name": "variable.parameter.kotlin"
								}
							}
						},
						{
							"match": "(@(?:exception|throws))\\s+(\\S+)",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.javadoc.kotlin"
								},
								"2": {
									"name": "entity.name.type.class.kotlin"
								}
							}
						},
						{
							"match": "{(@link)\\s+(\\S+)?#([\\w$]+\\s*\\([^\\(\\)]*\\)).*?}",
							"captures": {
								"1": {
									"name": "keyword.other.documentation.javadoc.kotlin"
								},
								"2": {
									"name": "entity.name.type.class.kotlin"
								},
								"3": {
									"name": "variable.parameter.kotlin"
								}
							}
						}
					]
				}
			]
		},
		"comments": {
			"patterns": [
				{
					"begin": "/\\*", 
					"captures": {
						"0": {
							"name": "punctuation.definition.comment.kotlin"
						}
					}, 
					"end": "\\*/", 
					"name": "comment.block.kotlin"
				}, 
				{
					"captures": {
						"1": {
							"name": "comment.line.double-slash.kotlin"
						}, 
						"2": {
							"name": "punctuation.definition.comment.kotlin"
						}
					}, 
					"match": "\\s*((//).*$\\n?)"
				}
			]
		},
		"imports": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "keyword.other.kotlin"
						},
						"2": {
							"name": "keyword.other.kotlin"
						}
					},
					"match": "^\\s*(import)\\s+[^ $]+\\s+(as)?"
				}
			]
		},
		"namespaces": {
			"patterns": [
				{
					"match": "\\b(namespace)\\b",
					"name": "keyword.other.kotlin"
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#statements" 
						}
					]
				}
			]
		},
		"annotations": {
			"patterns": [
				{
					"begin": "(@)(\\s*([^\\s(]+(?:\\.[^\\s(]+)*))(\\()?",
					"beginCaptures": {
						"1": {
							"name": "punctuation.definition.annotation.kotlin"
						},
						"2": {
							"name": "punctuation.definition.annotation.kotlin"
						},
						"3": {
							"name": "storage.type.annotation.kotlin"
						},
						"4": {
							"name": "punctuation.definition.annotation-arguments.begin.bracket.round.kotlin"
						}
					},
					"end": "(\\))?",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.annotation-arguments.end.bracket.round.kotlin"
						}
					},
					"name": "meta.declaration.annotation.kotlin",
					"patterns": [
						{
							"captures": {
								"1": {
									"name": "meta.constant.other.key.kotlin"
								},
								"2": {
									"name": "keyword.operator.assignment.kotlin"
								}
							},
							"match": "(\\w*)\\s*(=)"
						},
						{
							"include": "#statements"
						}
					]
				}
			]
		},
		"types": {
			"patterns": [
				{
					"match": "\\b(Nothing|Any|Unit|String|CharSequence|Int|Boolean|Char|Long|Double|Float|Short|Byte|dynamic)\\b", 
					"name": "meta.storage.type.builtin.kotlin"
				},
				{
					"match": "\\b(IntArray|BooleanArray|CharArray|LongArray|DoubleArray|FloatArray|ShortArray|ByteArray)\\b", 
					"name": "meta.storage.type.builtin.array.kotlin"
				},
				{
					"begin": "\\b(Array|Collection|List|Map|Set|MutableList|MutableMap|MutableSet|Sequence)<\\b",
					"beginCaptures": {
						"1": {
							"name": "meta.storage.type.builtin.collection.kotlin"
						}
					},
					"end": ">",
					"patterns": [
						{ 
							"include": "#types" 
						},
						{
							"include": "#keywords" 
						}
					]
				},
				{
					"begin": "\\w+<",
					"end": ">",
					"patterns": [
						{
							"include": "#types"
						},
						{
							"include": "#keywords" 
						}
					]
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{ 
							"include": "#statements"
						}
					]
				},
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{ 
							"include": "#types" 
						}
					]
				},
				{
					"match": "(->)",
					"name": "keyword.operator.declaration.kotlin"
				}
			]
		},
		"generics": {
			"patterns": [
				{
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.declaration.kotlin"
						}
					},
					"end": "(?=,|>)",
					"patterns": [
						{ 
							"include": "#types" 
						}
					]
				},
				{ 
					"include": "#keywords"
				},
				{
					"match": "\\w+",
					"name": "storage.type.generic.kotlin"
				}
			]
		},
		"typedefs": {
			"begin": "(?=\\s*(?:type))",
			"end": "(?=$)",
			"patterns": [
				{
					"match": "\\b(type)\\b",
					"name": "keyword.other.kotlin"
				},
				{
					"begin": "<",
					"end": ">",
					"patterns": [
						{ 
							"include": "#generics" 
						}
					]
				},
				{
					"include": "#expressions"
				}
			]
		},
		"classes": {
			"begin": "(?<!::)(?=\\b(?:companion|inner|class|object|interface)\\b)",
			"end": "(?=$|\\})",
			"patterns": [
				{
					"include": "#comments-javadoc"
				},
				{
					"include" : "#comments"
				},
				{
					"begin": "\\b(companion\\s*)?(inner\\s*)?(class|object|interface)\\b",
					"beginCaptures": {
						"1": {
							"name": "storage.modifier.kotlin"
						},
						"2": {
							"name": "storage.modifier.kotlin"
						},
						"3": {
							"name": "storage.modifier.kotlin"
						}
					},
					"end": "(?=<|\\{|\\(|:|$)",
					"patterns": [
						{
							"include": "#comments-javadoc"
						},
						{
							"include" : "#comments"
						},
						{
							"include" : "#annotations"
						},
						{
							"match": "constructor",
							"name": "storage.modifier.kotlin"
						},
						{
							"match": "\\w+",
							"name": "entity.name.type.class.kotlin"
						}
					]
				},
				{
					"begin": "<",
					"end": ">",
					"patterns": [
						{ 
							"include": "#generics" 
						}
					]
				},
				{
					"begin": "\\(", 
					"end": "\\)", 
					"patterns": [
						{
							"include": "#parameters"
						}
					]
				},
				{
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.declaration.kotlin"
						}
					},
					"end": "(?={|$)",
					"patterns": [
						{
							"match": "\\w+",
							"name": "entity.other.inherited-class.kotlin"
						},
						{
							"begin": "\\(",
							"end": "\\)",
							"patterns": [
								{
									"include": "#expressions"
								}
							]
						}
					]
				},
				{
					"begin": "\\{",
					"end": "\\}",
					"patterns": [
						{
							"include": "#statements"
						}
					]
				}
			]
		},
		"variables": {
			"begin": "(?=\\s*\\b(?:var|val)\\b)",
			"end": "(?=:|=|(\\b(by)\\b)|$)",
			"patterns": [
				{
					"begin": "\\b(var|val)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.kotlin" 
						}
					},
					"end": "(?=:|=|(\\b(by)\\b)|$)",
					"patterns": [
						{
							"begin": "<",
							"end": ">",
							"patterns": [
								{
									"include": "#generics"
								}
							]
						},
						{
							"captures": {
								"2": { 
									"name": "entity.name.variable.kotlin"
								}
							},
							"match": "([\\.<\\?>\\w]+\\.)?(\\w+)"
						}
					]
				},
				{
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.declaration.kotlin"
						}
					},
					"end": "(?==|$)",
					"patterns": [
						{
							"include": "#types"
						},
						{ 
							"include": "#getters-and-setters" 
						}
					]
				},
				{
					"begin": "\\b(by)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.kotlin"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"include": "#expressions"
						}
					]
				},
				{
					"begin": "(=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.kotlin"
						}
					},
					"end": "(?=$)",
					"patterns": [
						{
							"include": "#expressions"
						},
						{
							"include": "#getters-and-setters"
						}
					]
				}
			]
		},
		"getters-and-setters": {
			"patterns": [
				{
					"begin": "\\b(get)\\b\\s*\\(\\s*\\)",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.kotlin"
						}
					},
					"end": "\\}|(?=\\bset\\b)|$",
					"patterns": [
						{
							"begin": "(=)",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.assignment.kotlin"
								}
							},
							"end": "(?=$|\\bset\\b)",
							"patterns": [
								{
									"include": "#expressions"
								}
							]
						},
						{
							"begin": "\\{",
							"end": "\\}",
							"patterns": [
								{ 
									"include": "#expressions" 
								}
							]
						}
					]
				},
				{
					"begin": "\\b(set)\\b\\s*(?=\\()",
					"beginCaptures": {
						"1": {
							"name": "keyword.control.kotlin"
						}
					},
					"end": "\\}|(?=\\bget\\b)|$",
					"patterns": [
						{
							"begin": "\\(",
							"end": "\\)",
							"patterns": [
								{
									"include": "#parameters"
								}
							 ] 
						},
						{
							"begin": "(=)",
							"beginCaptures": {
								"1": {
									"name": "keyword.operator.assignment.kotlin"
								}
							},
							"end": "(?=$|\\bset\\b)",
							"patterns": [
								{
									"include": "#expressions"
								}
							]
						},
						{
							"begin": "\\{",
							"end": "\\}",
							"patterns": [
								{ 
									"include": "#expressions" 
								}
							]
						}
					]
				}
			]
		},
		"functions": {
			"begin": "(?=\\s*\\b(?:fun)\\b)",
			"end": "(?=$|\\})",
			"patterns": [
				{
					"begin": "\\b(fun)\\b",
					"beginCaptures": {
						"1": {
							"name": "keyword.other.kotlin"
						}
					},
					"end": "(?=\\()",
					"patterns": [
						{
							"begin": "<",
							"end": ">",
							"patterns": [
								{
									"include": "#generics"
								}
							]
						},
						{
							"captures": {
								"2": { 
									"name": "entity.name.function.kotlin"
								}
							},
							"match": "([\\.<\\?>\\w]+\\.)?(\\w+)"
						}
					]
				},
				{
					"begin": "\\(", 
					"end": "\\)", 
					"patterns": [
						{
							"include": "#parameters"
						}
					]
				},
				{
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.declaration.kotlin"
						}
					},
					"end": "(?={|=|$)", 
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				{
					"begin": "\\{", 
					"end": "(?=\\})", 
					"patterns": [
						{
							"include": "#statements"
						}
					]  
				},
				{
					"begin": "(=)", 
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.assignment.kotlin"
						}
					},
					"end": "(?=$)", 
					"patterns": [
						{
							"include": "#expressions"
						}
					]  
				}
			]
		},
		"parameters": {
			"patterns": [
				{
					"begin": "(:)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.declaration.kotlin"
						}
					},
					"end": "(?=,|\\)|=)", 
					"patterns": [
						{
							"include": "#types"
						}
					]
				},
				{
					"begin": "(=)",
					"beginCaptures": {
						"1": {
							"name": "keyword.operator.declaration.kotlin"
						}
					},
					"end": "(?=,|\\))",
					"patterns": [
						{
							"include" : "#expressions"
						}
					]
				},
				{
					"include": "#keywords"
				},
				{
					"match": "\\w+",
					"name": "variable.parameter.function.kotlin"
				}
			]
		},
		"expressions": {
			"patterns": [
				{
					"begin": "\\(",
					"end": "\\)",
					"patterns": [
						{ 
							"include": "#expressions" 
						}
					]
				},
				{
					"include": "#types"
				},
				{
					"include": "#strings"
				},
				{
					"include": "#constants"
				},
				{
					"include": "#comments-javadoc"
				},
				{
					"include": "#comments"
				},
				{
					"include": "#keywords"
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"begin": "\"\"\"", 
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.kotlin"
						}
					}, 
					"end": "\"\"\"", 
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.kotlin"
						}
					}, 
					"name": "string.quoted.third.kotlin", 
					"patterns": [
						{
							"match": "(\\$\\w+|\\$\\{[^\\}]+\\})",
							"name": "punctuation.definition.template-expression"
						},
						{
							"match": "\\\\.", 
							"name": "constant.character.escape.kotlin"
						}
					]
				},
				{
					"begin": "\"", 
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.kotlin"
						}
					}, 
					"end": "\"", 
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.kotlin"
						}
					}, 
					"name": "string.quoted.double.kotlin", 
					"patterns": [
						{
							"match": "(\\$\\w+|\\$\\{[^\\}]+\\})",
							"name": "punctuation.definition.template-expression"
						},
						{
							"match": "\\\\.", 
							"name": "constant.character.escape.kotlin"
						}
					]
				}, 
				{
					"begin": "'", 
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.kotlin"
						}
					}, 
					"end": "'", 
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.kotlin"
						}
					}, 
					"name": "string.quoted.single.kotlin", 
					"patterns": [
						{
							"match": "\\\\.", 
							"name": "constant.character.escape.kotlin"
						}
					]
				},
				{
					"begin": "`", 
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.kotlin"
						}
					}, 
					"end": "`", 
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.kotlin"
						}
					}, 
					"name": "string.quoted.single.kotlin"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"match": "\\b(true|false|null|this|super|init)\\b",
					"name": "constant.language.kotlin"
				}, 
				{
					"match": "\\b((0(x|X)[0-9a-fA-F]*)|(([0-9]+\\.?[0-9]*)|(\\.[0-9]+))((e|E)(\\+|-)?[0-9]+)?)([LlFf])?\\b", 
					"name": "constant.numeric.kotlin"
				},
				{
					"match": "\\b([A-Z][A-Z0-9_]+)\\b",
					"name": "variable.other.property.kotlin"
				}
			]
		},
		"keywords": {
			"patterns": [
				{
					"match": "\\b(var|val|public|private|protected|abstract|final|sealed|enum|open|attribute|annotation|override|inline|vararg|in|out|internal|data|tailrec|operator|infix|const|yield|typealias|typeof|reified|suspend)\\b",
					"name": "storage.modifier.kotlin"
				},
				{
					"match": "\\b(try|catch|finally|throw)\\b", 
					"name": "keyword.control.catch-exception.kotlin"
				},
				{
					"match": "\\b(if|else|while|for|do|return|when|where|break|continue)\\b", 
					"name": "keyword.control.kotlin"
				},
				{
					"match": "\\b(in|is|!in|!is|as|as\\?|assert)\\b", 
					"name": "keyword.control.kotlin"
				},
				{
					"match": "(==|!=|===|!==|<=|>=|<|>)", 
					"name": "keyword.operator.comparison.kotlin"
				}, 
				{
					"match": "(=)", 
					"name": "keyword.operator.assignment.kotlin"
				},
				{
					"match": "(::)", 
					"name": "keyword.operator.kotlin"
				},
				{
					"match": "(:)", 
					"name": "keyword.operator.declaration.kotlin"
				},
				{
					"match": "\\b(by)\\b", 
					"name": "keyword.other.by.kotlin"
				},
				{
					"match": "(\\?\\.)", 
					"name": "keyword.operator.safenav.kotlin"
				}, 
				{
					"match": "(\\.)", 
					"name": "keyword.operator.dot.kotlin"
				}, 
				{
					"match": "(\\?:)", 
					"name": "keyword.operator.elvis.kotlin"
				}, 
				{
					"match": "(\\-\\-|\\+\\+)", 
					"name": "keyword.operator.increment-decrement.kotlin"
				}, 
				{
					"match": "(\\+=|\\-=|\\*=|\\/=)",
					"name": "keyword.operator.arithmetic.assign.kotlin"
				},
				{
					"match": "(\\.\\.)",
					"name": "keyword.operator.range.kotlin"
				},
				{
					"match": "(\\-|\\+|\\*|\\/|%)", 
					"name": "keyword.operator.arithmetic.kotlin"
				}, 
				{
					"match": "(!|&&|\\|\\|)", 
					"name": "keyword.operator.logical.kotlin"
				},
				{
					"match": "(;)", 
					"name": "punctuation.terminator.kotlin"
				}
			]
		}
	}
}
